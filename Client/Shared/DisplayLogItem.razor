@using BlazorApp.Shared.CoreDto

<div name="row-header" class="row my-1 py-1">
    <div class="d-block d-inline col-lg-2 col-md-2 col-sm-4 col-4 text-uppercase"><h4>Symbol</h4></div>
    <div class="d-block d-inline col-lg-2 col-md-2 d-none d-lg-block d-md-block text-uppercase"><h4>Quantity</h4></div>
    <div class="d-block d-inline col-lg-2 col-md-2 col-sm-4 col-4 text-uppercase"><h4>Bought</h4></div>
    <div class="d-block d-inline col-lg-2 col-md-2 d-none d-lg-block d-md-block text-uppercase"><h4>Stop loss</h4></div>
    <div class="d-block d-inline col-lg-2 col-md-2 col-sm-4 col-4 text-uppercase"><h4>Take profit</h4></div>
    <div class="d-block d-inline col-lg-2 col-md-2 d-none d-lg-block d-md-block text-uppercase"><h4>Sold</h4></div>
    
</div>
@if (Logs != null)
{
    @foreach (var itemLog in Logs)
    {
        <div name="row-content" class="row my-2 py-1 align-self-baseline border border-secondary">
            <div class="d-block d-inline col-lg-2 col-md-2 col-sm-4 col-4">
                @if (!itemLog.SoldDate.HasValue)
                {
                    @if (itemLog.Close >= itemLog.PriceBought)
                    {
                        <a href="https://www.binance.com/en/trade/{@itemLog.Symbol}" style="background-color: lightgreen" target="_blank">@itemLog.Symbol</a>@($" ({itemLog.Close})")<br /><i>@(itemLog.Close * itemLog.Quantity)</i>
                    }
                    else if (itemLog.Close >= itemLog.PriceProfit)
                    {
                        <a href="https://www.binance.com/en/trade/{@itemLog.Symbol}" style="background-color: green" target="_blank">@itemLog.Symbol</a>@($" ({itemLog.Close})")<br /><i>@(itemLog.Close * itemLog.Quantity)</i>
                    }
                    else
                    {
                        <a href="https://www.binance.com/en/trade/{@(itemLog.Symbol)}" target="_blank">@itemLog.Symbol</a>@($" ({itemLog.Close})")<br /><i>(@(itemLog.Close * itemLog.Quantity))</i>
                    }
                }
                else
                {
                    @itemLog.Symbol
                }
            </div>

            <div class="d-block d-inline col-lg-2 col-md-2 d-none d-lg-block d-md-block">@itemLog.Quantity</div>

            <div class="d-block d-inline col-lg-2 col-md-2 col-sm-4 col-4">
                <Tooltip Text=@(itemLog.BoughtDate.HasValue ? $"Bought at {itemLog.BoughtDate.Value.ToString("dd/MM/yyyy HH:mm:ss")}" : string.Empty)>@Math.Round(itemLog.PriceBought, 8)<br /><i>@(@Math.Round(itemLog.PriceBought, 8) * itemLog.Quantity)</i></Tooltip>
            </div>

            @if (itemLog.PriceStopLoss != 0)
            {
                <div class="d-block d-inline col-lg-2 col-md-2 d-none d-lg-block d-md-block">
                    @Math.Round(itemLog.PriceStopLoss, 8)<br /><i>@(itemLog.PriceStopLoss * itemLog.Quantity)</i>
                </div>
            }
            else
            {
                <div class="d-block d-inline col-lg-2 col-md-2 d-none d-lg-block d-md-block"> </div>
            }

            @if (itemLog.PriceProfit != 0)
            {
                <div class="d-block d-inline col-lg-2 col-md-2 col-sm-4 col-4">
                    @Math.Round(itemLog.PriceProfit, 8)<br /><i>@(Math.Round(itemLog.PriceProfit, 8) * itemLog.Quantity)</i>
                </div>
            }
            else
            {
                <div class="d-block d-inline col-lg-2 col-md-2 col-sm-4 col-4"> </div>
            }

            @* SOLD *@
            @if (itemLog.PriceSold != 0)
            {
                decimal soldValue = itemLog.PriceSold * itemLog.Quantity;
                decimal boughtValue = itemLog.PriceBought * itemLog.Quantity;

                decimal benefit = soldValue - boughtValue;

                benefit = Math.Round(benefit, 8);

                if (benefit > 0)
                {
                    <div class="d-block d-inline col-lg-2 col-md-2 d-none d-lg-block d-md-block">
                        <Tooltip Text=@(itemLog.SoldDate.HasValue ? $"Sold at {@itemLog.SoldDate.Value.ToString("dd/MM/yyyy HH:mm:ss")}" : string.Empty)>@Math.Round(itemLog.PriceSold, 8)<br /><p class="p-0 m-0 text-success"><i>@benefit</i></p></Tooltip>
                    </div>
                }
                else if (benefit < 0)
                {
                    <div class="d-block d-inline col-lg-2 col-md-2 d-none d-lg-block d-md-block">
                        <Tooltip Text=@(itemLog.SoldDate.HasValue ? $"Sold at {@itemLog.SoldDate.Value.ToString("dd/MM/yyyy HH:mm:ss")}" : string.Empty)>@Math.Round(itemLog.PriceSold, 8)<br /><p class="p-0 m-0 text-danger"><i>@benefit</i></p></Tooltip>
                    </div>
                }
                else
                {
                    <div class="d-block d-inline col-lg-2 col-md-2 d-none d-lg-block d-md-block">
                        <Tooltip Text=@(itemLog.SoldDate.HasValue ? $"Sold at {@itemLog.SoldDate.Value.ToString("dd/MM/yyyy HH:mm:ss")}" : string.Empty)>@Math.Round(itemLog.PriceSold, 8)<br /><i>@benefit</i></Tooltip>
                    </div>
                }
            }
            else
            {
                <div class="d-block d-inline col-lg-2 col-md-2 d-none d-lg-block d-md-block"> </div>
            }

            @ChildContent
        </div>
    }
}

@code {
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public List<LogInfoItemDto>? Logs { get; set; }
}
