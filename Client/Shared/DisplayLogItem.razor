@using BlazorApp.Shared.CoreDto

<div name="row-header" class="row my-1 py-1">
    <div class="d-block d-inline col-lg-2 col-md-2 col-sm-4 col-4 text-uppercase"><h4>Symbol</h4></div>
    <div class="d-block d-inline col-lg-2 col-md-2 col-sm-4 col-4 text-uppercase"><h4>Bought</h4></div>
    <div class="d-block d-inline col-lg-2 col-md-2 d-none d-lg-block d-md-block text-uppercase"><h4>Stop loss</h4></div>
    <div class="d-block d-inline col-lg-2 col-md-2 col-sm-4 col-4 text-uppercase"><h4>Take profit</h4></div>
    <div class="d-block d-inline col-lg-2 col-md-2 d-none d-lg-block d-md-block text-uppercase"><h4>Sold</h4></div>
    <div class="d-block d-inline col-lg-2 col-md-2 d-none text-uppercase">QUANTITY</div>
</div>
@if (Logs != null)
{
    foreach (var log in Logs)
    {
        <div name="row-content" class="row my-2 py-1 align-self-baseline">
            <div class="d-block d-inline col-lg-2 col-md-2 col-sm-4 col-4"><a href="@($"https://www.binance.com/en/trade/{@log.Symbol}")" target="_blank">@log.Symbol</a> (@(log.Close * log.Quantity))</div>

            <div class="d-block d-inline col-lg-2 col-md-2 col-sm-4 col-4">
                <Tooltip Text=@(log.BoughtDate.HasValue ? $"Bought at {log.BoughtDate.Value.ToString("dd/MM/yyyy HH:mm:ss")}" : string.Empty)>@log.PriceBought<br /><i>@(log.PriceBought * log.Quantity)</i></Tooltip>
            </div>

            @if (log.PriceStopLoss != 0)
            {
                <div class="d-block d-inline col-lg-2 col-md-2 d-none d-lg-block d-md-block">
                    @log.PriceStopLoss<br /><i>@(log.PriceStopLoss * log.Quantity)</i>
                </div>
            }
            else
            {
                <div class="d-block d-inline col-lg-2 col-md-2 d-none d-lg-block d-md-block"> </div>
            }

            @if (log.PriceProfit != 0)
            {
                <div class="d-block d-inline col-lg-2 col-md-2 col-sm-4 col-4">
                    @log.PriceProfit<br /><i>@(log.PriceProfit * log.Quantity)</i>
                </div>
            }
            else
            {
                <div class="d-block d-inline col-lg-2 col-md-2 col-sm-4 col-4"> </div>
            }

            @* SOLD *@
            @if (log.PriceSold != 0)
            {
                decimal soldValue = log.PriceSold * log.Quantity;
                decimal boughtValue = log.PriceBought * log.Quantity;

                decimal benefit = soldValue - boughtValue;

                if (benefit > 0)
                {
                    <div class="d-block d-inline col-lg-2 col-md-2 d-none d-lg-block d-md-block">
                        <Tooltip Text=@(log.SoldDate.HasValue ? $"Sold at {@log.SoldDate.Value.ToString("dd/MM/yyyy HH:mm:ss")}" : string.Empty)>@log.PriceSold<br /><p class="p-0 m-0 text-success"><i>@benefit</i></p></Tooltip>
                    </div>
                }
                else if (benefit < 0)
                {
                    <div class="d-block d-inline col-lg-2 col-md-2 d-none d-lg-block d-md-block">
                        <Tooltip Text=@(log.SoldDate.HasValue ? $"Sold at {@log.SoldDate.Value.ToString("dd/MM/yyyy HH:mm:ss")}" : string.Empty)>@log.PriceSold<br /><p class="p-0 m-0 text-danger"><i>@benefit</i></p></Tooltip>
                    </div>
                }
                else
                {
                    <div class="d-block d-inline col-lg-2 col-md-2 d-none d-lg-block d-md-block">
                        <Tooltip Text=@(log.SoldDate.HasValue ? $"Sold at {@log.SoldDate.Value.ToString("dd/MM/yyyy HH:mm:ss")}" : string.Empty)>@log.PriceSold<br /><i>@benefit</i></Tooltip>
                    </div>
                }
            }
            else
            {
                <div class="d-block d-inline col-lg-2 col-md-2 d-none d-lg-block d-md-block"> </div>
            }

            <div class="d-block d-inline col-lg-2 col-md-2 d-none">@log.Quantity</div>

            @ChildContent
        </div>
    }
}

@code {
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public List<LogInfoItemDto>? Logs { get; set; }
}
