@page "/logboughtsold_tam"
@using System.Globalization
@using BlazorApp.Shared.CoreDto
@using Newtonsoft.Json;
@inject HttpClient Http

@*<PageTitle>@(Properties.Resources.ACC_TYPE) - @(Properties.Resources.ACC_HOLDER) - Bought/Sold</PageTitle>*@

<h1>Bought/Sold</h1>
<p>List in chronological order</p>

@if (log == null)
{
    <div class="spinner"></div>
}
else
{
    @if (spinner)
    {
        <div class="spinner"></div>
    }
    else if (log.Logs != null && @_account != null)
    {
        <div class="container align-content-center align-self-baseline mt-1 pt-1">
            <div name="row-header" class="row my-1 py-1">
                <div class="d-block d-inline col-lg-3 col-md-3 col-sm-6 col-6 text-uppercase text-end">Account holder</div>
                <div class="d-block d-inline col-lg-9 col-md-9 col-sm-6 col-6">@_account.AccountHolder</div>
            </div>
            <div name="row-header" class="row my-1 py-1">
                <div class="d-block d-inline col-lg-3 col-md-3 col-sm-6 col-6 text-uppercase text-end">Account type</div>
                <div class="d-block d-inline col-lg-9 col-md-9 col-sm-6 col-6">@_account.AccountType</div>
            </div>
            <div name="row-header" class="row my-1 py-1">
                <div class="d-block d-inline col-lg-3 col-md-3 col-sm-6 col-6 text-uppercase text-end">Kline</div>
                <div class="d-block d-inline col-lg-9 col-md-9 col-sm-6 col-6">@_account.Interval</div>
            </div>
            <div name="row-header" class="row my-1 py-1">
                <div class="d-block d-inline col-lg-3 col-md-3 col-sm-6 col-6 text-uppercase text-end">Number symbol trade</div>
                <div class="d-block d-inline col-lg-9 col-md-9 col-sm-6 col-6">@_account.NbrSymbols</div>
            </div>
            <div name="row-header" class="row my-1 py-1">
                <div class="d-block d-inline col-lg-3 col-md-3 col-sm-6 col-6 text-uppercase text-end">Use TD CountDown</div>
                <div class="d-block d-inline col-lg-9 col-md-9 col-sm-6 col-6">@(_account.UseTDCountDown == "1" ? "Oui" : "Non")</div>
            </div>
            <div name="row-header" class="row my-1 py-1">
                <div class="d-block d-inline col-lg-3 col-md-3 col-sm-6 col-6 text-uppercase text-end">Use TD Combo</div>
                <div class="d-block d-inline col-lg-9 col-md-9 col-sm-6 col-6">@(_account.UseTDCombo == "1" ? "Oui" : "Non")</div>
            </div>
            <div name="row-header" class="row my-1 py-1">
                <div class="d-block d-inline col-lg-3 col-md-3 col-sm-6 col-6 text-uppercase text-end">Conservatoire</div>
                <div class="d-block d-inline col-lg-9 col-md-9 col-sm-6 col-6">@(_account.UseConservatoire == "1" ? "Oui" : "Non")</div>
            </div>
            <div name="row-header" class="row my-1 py-1">
                <div class="d-block d-inline col-lg-3 col-md-3 col-sm-6 col-6 text-uppercase text-end">Buy / Sell ?</div>
                <div class="d-block d-inline col-lg-9 col-md-9 col-sm-6 col-6">@(_account.AllowBuySell == "3" ? "Both" : (_account.AllowBuySell == "0" ? "None" : (_account.AllowBuySell == "1" ? "Buy only" : "Sell only")))</div>
            </div>
            <div name="row-header" class="row my-1 py-1">
                <div class="d-block d-inline col-lg-3 col-md-3 col-sm-6 col-6 text-uppercase text-end">Real trades</div>
                <div class="d-block d-inline col-lg-9 col-md-9 col-sm-6 col-6">@(_account.RealAccountProfit.Sum(x => x.CompletedTrades)) completed (bought + sold) with @(_account.RealAccountProfit.Sum(x => x.CompletedTradesPositives)) positives trades / @(_account.RealAccountProfit.Sum(x => x.IncompletedTrades)) incompleted (Bought but not sold)</div>
            </div>
            <div name="row-header" class="row my-1 py-1">
                <div class="d-block d-inline col-lg-3 col-md-3 col-sm-6 col-6 text-uppercase text-end">Possible trades</div>
                <div class="d-block d-inline col-lg-9 col-md-9 col-sm-6 col-6">@(_account.SimulatedAccountProfit.Sum(x => x.CompletedTrades)) completed (bought + sold) with @(_account.SimulatedAccountProfit.Sum(x => x.CompletedTradesPositives)) positives trades / @(_account.SimulatedAccountProfit.Sum(x => x.IncompletedTrades)) incompleted (Bought but not sold)</div>
            </div>
            <div name="row-header" class="row my-1 py-1">
                <div class="d-block d-inline col-lg-3 col-md-3 col-sm-6 col-6 text-uppercase text-end">Details quotes (completed) :</div>
                <div class="d-block d-inline col-lg-9 col-md-9 col-sm-6 col-6">
                    <ul>
                        @foreach (var itemQuote in _account.ListQuotes)
                        {
                            var quoteBought = _dictBought.First(x => x.Key == itemQuote).Value;
                            var quoteSold = _dictSold.First(x => x.Key == itemQuote).Value;
                            var quoteProfit = quoteSold - quoteBought;

                            <li>@itemQuote : profit @(Math.Round(quoteProfit, 4)) (sold @(Math.Round(quoteSold, 4)) - bought @(Math.Round(quoteBought, 4))) </li>
                        }
                    </ul>
                </div>
            </div>
            <div name="row-header" class="row my-1 py-1">
                <div class="d-block d-inline col-lg-3 col-md-3 col-sm-4 col-4 text-uppercase text-end">
                    <div class="input-group mb-3">
                        <div class="input-group-prepend">
                            <label class="input-group-text">List symbols</label>
                        </div>
                        <select class="custom-select" id="SearchSymbolId" name="SearchSymbol" @onchange="SelectedSymbolChanged">
                            <option selected>@(string.Empty)</option>
                            @foreach (var symbol in symbols)
                            {
                                <option value="@symbol">@symbol</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="d-block d-inline col-lg-4 col-md-5 col-sm-4 col-4">
                    <div class="input-group mb-3">
                        <div class="input-group-prepend">
                            <label class="input-group-text">Or</label>
                        </div>
                        <input type="text" class="form-control textbox-parameters" value="@_currentTextSymbol" @onchange="this.OnValueChanged" placeholder="Enter symbol here if you know it">
                    </div>
                </div>
                <div class="d-block d-inline col-lg-5 col-md-5 col-sm-4 col-4">
                    @if (!string.IsNullOrEmpty(@log.Symbol))
                    {
                        <p>Current observed symbol : @log.Symbol</p>
                    }
                </div>
            </div>
            <div name="row-header" class="row my-1 py-1">
                <div class="d-block d-inline col-lg-2 col-md-2 col-sm-4 col-4 text-uppercase"><h4>Symbol</h4></div>
                <div class="d-block d-inline col-lg-2 col-md-2 col-sm-4 col-4 text-uppercase"><h4>Bought</h4></div>
                <div class="d-block d-inline col-lg-2 col-md-2 d-none d-lg-block d-md-block text-uppercase"><h4>Stop loss</h4></div>
                <div class="d-block d-inline col-lg-2 col-md-2 col-sm-4 col-4 text-uppercase"><h4>Take profit</h4></div>
                <div class="d-block d-inline col-lg-2 col-md-2 d-none d-lg-block d-md-block text-uppercase"><h4>Sold</h4></div>
                <div class="d-block d-inline col-lg-2 col-md-2 d-none text-uppercase">QUANTITY</div>
            </div>
            @foreach (var log in log.Logs)
            {
                <div name="row-content" class="row my-2 py-1 align-self-baseline">
                    <div class="d-block d-inline col-lg-2 col-md-2 col-sm-4 col-4"><a href="@($"https://www.binance.com/en/trade/{@log.Symbol}")" target="_blank">@log.Symbol</a> (@(log.Close * log.Quantity))</div>

                    <div class="d-block d-inline col-lg-2 col-md-2 col-sm-4 col-4">
                        <Tooltip Text=@(log.BoughtDate.HasValue ? $"Bought at {log.BoughtDate.Value.ToString("dd/MM/yyyy HH:mm:ss")}" : string.Empty)>@log.PriceBought<br /><i>@(log.PriceBought * log.Quantity)</i></Tooltip>
                    </div>

                    @if (log.PriceStopLoss != 0)
                    {
                        <div class="d-block d-inline col-lg-2 col-md-2 d-none d-lg-block d-md-block">
                            @log.PriceStopLoss<br /><i>@(log.PriceStopLoss * log.Quantity)</i>
                        </div>
                    }
                    else
                    {
                        <div class="d-block d-inline col-lg-2 col-md-2 d-none d-lg-block d-md-block"> </div>
                    }

                    @if (log.PriceProfit != 0)
                    {
                        <div class="d-block d-inline col-lg-2 col-md-2 col-sm-4 col-4">
                            @log.PriceProfit<br /><i>@(log.PriceProfit * log.Quantity)</i>
                        </div>
                    }
                    else
                    {
                        <div class="d-block d-inline col-lg-2 col-md-2 col-sm-4 col-4"> </div>
                    }

                    @* SOLD *@
                    @if (log.PriceSold != 0)
                    {
                        decimal soldValue = log.PriceSold * log.Quantity;
                        decimal boughtValue = log.PriceBought * log.Quantity;

                        decimal benefit = soldValue - boughtValue;

                        if (benefit > 0)
                        {
                            <div class="d-block d-inline col-lg-2 col-md-2 d-none d-lg-block d-md-block">
                                <Tooltip Text=@(log.SoldDate.HasValue ? $"Sold at {@log.SoldDate.Value.ToString("dd/MM/yyyy HH:mm:ss")}" : string.Empty)>@log.PriceSold<br /><p class="p-0 m-0 text-success"><i>@benefit</i></p></Tooltip>
                            </div>
                        }
                        else if (benefit < 0)
                        {
                            <div class="d-block d-inline col-lg-2 col-md-2 d-none d-lg-block d-md-block">
                                <Tooltip Text=@(log.SoldDate.HasValue ? $"Sold at {@log.SoldDate.Value.ToString("dd/MM/yyyy HH:mm:ss")}" : string.Empty)>@log.PriceSold<br /><p class="p-0 m-0 text-danger"><i>@benefit</i></p></Tooltip>
                            </div>
                        }
                        else
                        {
                            <div class="d-block d-inline col-lg-2 col-md-2 d-none d-lg-block d-md-block">
                                <Tooltip Text=@(log.SoldDate.HasValue ? $"Sold at {@log.SoldDate.Value.ToString("dd/MM/yyyy HH:mm:ss")}" : string.Empty)>@log.PriceSold<br /><i>@benefit</i></Tooltip>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="d-block d-inline col-lg-2 col-md-2 d-none d-lg-block d-md-block"> </div>
                    }

                    <div class="d-block d-inline col-lg-2 col-md-2 d-none">@log.Quantity</div>
                </div>
            }
        </div>
    }
}

@code {
    private bool spinner = false;
    private string _currentTextSymbol = string.Empty;
    private List<string> symbols = new List<string>();
    private LogInfoDto log = new LogInfoDto();

    private string _stringAccount = null;
    private AccountDto _account = new AccountDto();

    private Dictionary<string, decimal> _dictBought = new Dictionary<string, decimal>();
    private Dictionary<string, decimal> _dictSold = new Dictionary<string, decimal>();

    private string _url = $"/api/GetBoughtSold?accType=Spot&accHolder=Tam";

    protected override async Task OnInitializedAsync()
    {
        symbols = await Http.GetFromJsonAsync<List<string>>($"/api/GetListStringSymbolsBuySell?accType=Spot&accHolder=Tam");

        _stringAccount = await Http.GetStringAsync($"/api/GetInfos?accType=Spot&accHolder=Tam");
        CalculateProfitQuotes();

        // Add your update logic here
        log.Logs = await Http.GetFromJsonAsync<List<LogInfoItemDto>>(_url);

        // Update the UI
        StateHasChanged();

        ShouldRender();
    }

    private async void SelectedSymbolChanged(ChangeEventArgs e)
    {
        spinner = true;

        if (log != null)
        {
            if (!string.IsNullOrEmpty(e.Value.ToString()))
            {
                log.Symbol = e.Value.ToString();
                log.Logs.Clear();
                log.Logs = await Http.GetFromJsonAsync<List<LogInfoItemDto>>($"{_url}&symbol={e.Value.ToString()}");
            }
            else
            {
                log.Symbol = string.Empty;
                log.Logs.Clear();
                log.Logs = await Http.GetFromJsonAsync<List<LogInfoItemDto>>($"{_url}");
            }
        }

        spinner = false;

        // Update the UI
        StateHasChanged();
    }

    private async void OnValueChanged(ChangeEventArgs e)
    {
        spinner = true;

        if (log != null)
        {
            if (!string.IsNullOrEmpty(e.Value.ToString()))
            {
                log.Symbol = e.Value.ToString();
                log.Logs.Clear();
                log.Logs = await Http.GetFromJsonAsync<List<LogInfoItemDto>>($"{_url}&symbol={e.Value.ToString()}");
            }
            else
            {
                log.Symbol = string.Empty;
                log.Logs.Clear();
                log.Logs = await Http.GetFromJsonAsync<List<LogInfoItemDto>>($"{_url}");
            }
        }

        spinner = false;

        // Update the UI
        StateHasChanged();
    }

    private void CalculateProfitQuotes()
    {
        if (!string.IsNullOrEmpty(_stringAccount))
        {
            _account = JsonConvert.DeserializeObject<AccountDto>(_stringAccount);

            if (_account != null)
            {
                foreach (var itemQuote in _account.ListQuotes)
                {
                    foreach (var itemProfit in _account.RealAccountProfit)
                    {
                        var listQuoteSold = itemProfit.CompletedDetailsSold.Where(x => x.Key == itemQuote).Sum(x => x.Value);
                        var listQuoteBought = itemProfit.CompletedDetailsBought.Where(x => x.Key == itemQuote).Sum(x => x.Value);

                        if (_dictBought.ContainsKey(itemQuote))
                        {
                            _dictBought.TryGetValue(itemQuote, out decimal totalBought);
                            totalBought += listQuoteBought;

                            _dictBought.Remove(itemQuote);
                            _dictBought.Add(itemQuote, totalBought);
                        }
                        else
                            _dictBought.Add(itemQuote, listQuoteBought);

                        if (_dictSold.ContainsKey(itemQuote))
                        {
                            _dictSold.TryGetValue(itemQuote, out decimal totalSold);
                            totalSold += listQuoteSold;

                            _dictSold.Remove(itemQuote);
                            _dictSold.Add(itemQuote, totalSold);
                        }
                        else
                            _dictSold.Add(itemQuote, listQuoteSold);
                    }
                }
            }
        }
    }
}
