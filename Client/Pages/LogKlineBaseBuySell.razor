@page "/logbaseboughtsold"
@using System.Globalization
@using BlazorApp.Shared.CoreDto
@using Newtonsoft.Json
@inject HttpClient Http

<PageTitle>Bought/Sold</PageTitle>

<h1>Bought/Sold</h1>
<p>Quantity simulated : 100 / List in chronological order</p>

@if (log == null)
{
    <div class="spinner"></div>
}
else
{
    <select id="SearchSymbolId" name="SearchSymbol" @onchange="SelectedSymbolChanged" class="form-control1">
        <option>@string.Empty</option>
        @foreach (var symbol in symbols)
        {
            <option value="@symbol">@symbol</option>
        }
    </select>

    if (!string.IsNullOrEmpty(@log.Symbol))
    {
        <p>Current observed symbol : @log.Symbol</p>
    }

    if (@_account != null && @_account.ListQuotes.Count > 0)
    {
        <div>
            <p>Details quotes  (completed) :</p>
            <ul>
                @foreach (var itemQuote in _account.ListQuotes)
                {
                    var quoteBought = _dictBought.First(x => x.Key == itemQuote).Value;
                    var quoteSold = _dictSold.First(x => x.Key == itemQuote).Value;
                    var quoteProfit = quoteSold - quoteBought;

                    <li>@itemQuote : profit @(Math.Round(quoteProfit, 4)) (sold @(Math.Round(quoteSold, 4)) - bought @(Math.Round(quoteBought, 4))) </li>
                }
            </ul>
        </div>
    }

    if (spinner)
    {
        <div class="spinner"></div>
    }
    else if (log.Logs != null)
    {
        <div class="container align-content-center align-self-baseline">
            <div name="row-header" class="row my-1 py-1">
                <div class="d-block d-inline col-lg-2 col-md-2 col-sm-4 col-4 text-uppercase"><h4>Symbol</h4></div>
                <div class="d-block d-inline col-lg-2 col-md-2 col-sm-4 col-4 text-uppercase"><h4>Bought</h4></div>
                <div class="d-block d-inline col-lg-2 col-md-2 d-none d-lg-block d-md-block text-uppercase"><h4>Stop loss</h4></div>
                <div class="d-block d-inline col-lg-2 col-md-2 col-sm-4 col-4 text-uppercase"><h4>Take profit</h4></div>
                <div class="d-block d-inline col-lg-2 col-md-2 d-none d-lg-block d-md-block text-uppercase"><h4>Sold</h4></div>
                <div class="d-block d-inline col-lg-2 col-md-2 d-none text-uppercase">QUANTITY</div>
            </div>
            @foreach (var log in log.Logs)
            {
                <div name="row-content" class="row my-2 py-1 align-self-baseline">
                    <div class="d-block d-inline col-lg-2 col-md-2 col-sm-4 col-4"><a href="@($"https://www.binance.com/en/trade/{@log.Symbol}")" target="_blank">@log.Symbol</a> (@(log.Close * log.Quantity))</div>

                    <div class="d-block d-inline col-lg-2 col-md-2 col-sm-4 col-4">
                        <Tooltip Text=@(log.BoughtDate.HasValue ? $"Bought at {log.BoughtDate.Value.ToString("dd/MM/yyyy HH:mm:ss")}" : string.Empty)>@log.PriceBought<br /><i>@(log.PriceBought * log.Quantity)</i></Tooltip>
                    </div>

                    @if (log.PriceStopLoss != 0)
                    {
                        <div class="d-block d-inline col-lg-2 col-md-2 d-none d-lg-block d-md-block">
                            @log.PriceStopLoss<br /><i>@(log.PriceStopLoss * log.Quantity)</i>
                        </div>
                    }
                    else
                    {
                        <div class="d-block d-inline col-lg-2 col-md-2 d-none d-lg-block d-md-block"> </div>
                    }

                    @if (log.PriceProfit != 0)
                    {
                        <div class="d-block d-inline col-lg-2 col-md-2 col-sm-4 col-4">
                            @log.PriceProfit<br /><i>@(log.PriceProfit * log.Quantity)</i>
                        </div>
                    }
                    else
                    {
                        <div class="d-block d-inline col-lg-2 col-md-2 col-sm-4 col-4"> </div>
                    }

                    @* SOLD *@
                    @if (log.PriceSold != 0)
                    {
                        decimal soldValue = log.PriceSold * log.Quantity;
                        decimal boughtValue = log.PriceBought * log.Quantity;

                        decimal benefit = soldValue - boughtValue;

                        if (benefit > 0)
                        {
                            <div class="d-block d-inline col-lg-2 col-md-2 d-none d-lg-block d-md-block">
                                <Tooltip Text=@(log.SoldDate.HasValue ? $"Sold at {@log.SoldDate.Value.ToString("dd/MM/yyyy HH:mm:ss")}" : string.Empty)>@log.PriceSold<br /><p class="p-0 m-0 text-success"><i>@benefit</i></p></Tooltip>
                            </div>
                        }
                        else if (benefit < 0)
                        {
                            <div class="d-block d-inline col-lg-2 col-md-2 d-none d-lg-block d-md-block">
                                <Tooltip Text=@(log.SoldDate.HasValue ? $"Sold at {@log.SoldDate.Value.ToString("dd/MM/yyyy HH:mm:ss")}" : string.Empty)>@log.PriceSold<br /><p class="p-0 m-0 text-danger"><i>@benefit</i></p></Tooltip>
                            </div>
                        }
                        else
                        {
                            <div class="d-block d-inline col-lg-2 col-md-2 d-none d-lg-block d-md-block">
                                <Tooltip Text=@(log.SoldDate.HasValue ? $"Sold at {@log.SoldDate.Value.ToString("dd/MM/yyyy HH:mm:ss")}" : string.Empty)>@log.PriceSold<br /><i>@benefit</i></Tooltip>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="d-block d-inline col-lg-2 col-md-2 d-none d-lg-block d-md-block"> </div>
                    }

                    <div class="d-block d-inline col-lg-2 col-md-2 d-none">@log.Quantity</div>
                </div>
            }
        </div>
    }
}

@code {
    private bool spinner = false;
    private List<string> symbols = new List<string>();
    private LogInfoDto log = new LogInfoDto();

    private string _stringAccount = null;
    private AccountDto _account = new AccountDto();

    private Dictionary<string, decimal> _dictBought = new Dictionary<string, decimal>();
    private Dictionary<string, decimal> _dictSold = new Dictionary<string, decimal>();

    private string _url = $"/api/GetBaseBoughtSold?accType=Spot";

    protected override async Task OnInitializedAsync()
    {
        symbols = await Http.GetFromJsonAsync<List<string>>($"/api/GetListStringSymbolsBuySell?accType=Spot");

        _stringAccount = await Http.GetStringAsync($"/api/GetInfos?accType=Spot&accHolder=An");
        CalculateProfitQuotes();

        // Add your update logic here
        log.Logs = await Http.GetFromJsonAsync<List<LogInfoItemDto>>(_url);

        // Update the UI
        StateHasChanged();
    }

    private async void SelectedSymbolChanged(ChangeEventArgs e)
    {
        spinner = true;

        if (log != null)
        {
            if (!string.IsNullOrEmpty(e.Value.ToString()))
            {
                log.Symbol = e.Value.ToString();
                log.Logs.Clear();
                log.Logs = await Http.GetFromJsonAsync<List<LogInfoItemDto>>($"{_url}&symbolName={e.Value.ToString()}");
            }
            else
            {
                log.Symbol = string.Empty;
                log.Logs.Clear();
                log.Logs = await Http.GetFromJsonAsync<List<LogInfoItemDto>>($"{_url}");
            }
        }

        spinner = false;

        // Update the UI
        StateHasChanged();
    }

        private void CalculateProfitQuotes()
    {
        if (!string.IsNullOrEmpty(_stringAccount))
        {
            _account = JsonConvert.DeserializeObject<AccountDto>(_stringAccount);

            if (_account != null)
            {
                foreach (var itemQuote in _account.ListQuotes)
                {
                    foreach (var itemProfit in _account.SimulatedAccountProfit)
                    {
                        var listQuoteSold = itemProfit.CompletedDetailsSold.Where(x => x.Key == itemQuote).Sum(x => x.Value);
                        var listQuoteBought = itemProfit.CompletedDetailsBought.Where(x => x.Key == itemQuote).Sum(x => x.Value);

                        if (_dictBought.ContainsKey(itemQuote))
                        {
                            _dictBought.TryGetValue(itemQuote, out decimal totalBought);
                            totalBought += listQuoteBought;

                            _dictBought.Remove(itemQuote);
                            _dictBought.Add(itemQuote, totalBought);
                        }
                        else
                            _dictBought.Add(itemQuote, listQuoteBought);

                        if (_dictSold.ContainsKey(itemQuote))
                        {
                            _dictSold.TryGetValue(itemQuote, out decimal totalSold);
                            totalSold += listQuoteSold;

                            _dictSold.Remove(itemQuote);
                            _dictSold.Add(itemQuote, totalSold);
                        }
                        else
                            _dictSold.Add(itemQuote, listQuoteSold);
                    }
                }
            }
        }
    }
}
