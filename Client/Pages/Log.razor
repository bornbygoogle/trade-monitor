@page "/log"
@using BlazorApp.Shared.CoreDto
@inject HttpClient Http

@*<PageTitle>@(Properties.Resources.ACC_TYPE) - @(Properties.Resources.ACC_HOLDER) - Log</PageTitle>*@

<h1>Logs</h1>

@if (log == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="d-grid gap-2 d-md-block">
        <select id="SearchSymbolId" name="SearchSymbol" @onchange="SelectedSymbolChanged" class="form-control1">
            <option>@string.Empty</option>
            @foreach (var symbol in symbols)
            {
                <option value="@symbol">@symbol</option>
            }
        </select>
        <button class="btn btn-primary btn-sm" type="button" @onclick="GetAllLog">All</button>
        <button class="btn btn-primary btn-sm" type="button" @onclick="GetLogsTechnic">Technic</button>
        <button class="btn btn-primary btn-sm" type="button" @onclick="GetLogsService">Service</button>
        <button class="btn btn-primary btn-sm" type="button" @onclick="GetLogsTrading">Trading</button>
        <button class="btn btn-primary btn-sm" type="button" @onclick="GetLogsTradingInfos">Trading infos</button>

    </div>

    if (!string.IsNullOrEmpty(@log.Symbol))
    {
        <p>Current observed symbol : @log.Symbol</p>
    }

    if (spinner)
    {
        <div class="spinner"></div>
    }
    else if (log.Logs != null) 
    {
        <div class="container align-content-center align-self-baseline text-center">
            <div name="row-header" class="row mt-2 pt-2">
                <div class="d-block d-inline col-lg-2 col-md-2 d-none d-lg-block d-md-block"><h4>Date</h4></div>
                <div class="d-block d-inline col-lg-2 col-md-2 d-none d-lg-block d-md-block"><h4>Service</h4></div>
                <div class="d-block d-inline col-lg-2 col-md-2 col-sm-4 col-4"><h4>Symbol</h4></div>
                <div class="d-block d-inline col-lg-6 col-md-6 col-sm-8 col-8 text-start"><h4>Message</h4></div>
            </div>
            @foreach (var log in log.Logs)
            {
                <div name="row-content" class="row my-1 py-1 align-self-baseline">
                    <div class="d-block d-inline col-lg-2 col-md-2 d-none d-lg-block d-md-block">@log.LogTime.ToString("dd/MM/yyyy HH:mm:ss")</div>
                    <div class="d-block d-inline col-lg-2 col-md-2 d-none d-lg-block d-md-block">@log.ServiceName</div>

                    <div class="d-block d-inline col-lg-2 col-md-2 col-sm-4 col-4"><Tooltip Text=@($"Service {@log.ServiceName} at {@log.LogTime.ToString("dd/MM/yyyy HH:mm:ss")}")>@log.Symbol</Tooltip></div>
                    <div class="d-block d-inline col-lg-6 col-md-6 col-sm-8 col-8 text-start">@log.LogMessage</div>
                </div>
            }
        </div>
    }
}

@code {
    private bool spinner = false;
    private List<string> symbols = new List<string>();
    private LogInfoDto log = new LogInfoDto();

    private string _url = $"/api/GetLogsTrading?accType=Spot&accHolder=An";
    
    protected override async Task OnInitializedAsync()
    {
        symbols = await Http.GetFromJsonAsync<List<string>>($"/api/GetListStringSymbols?accType=Spot&accHolder=An");

        log.Logs.Clear();
        // Add your update logic here
        log.Logs = await Http.GetFromJsonAsync<List<LogInfoItemDto>>(_url);

        // Update the UI
        StateHasChanged();
    }

    private async void SelectedSymbolChanged(ChangeEventArgs e)
    {
        spinner = true;

        if (log != null)
        {
            if (!string.IsNullOrEmpty(e.Value.ToString()))
            {
                log.Symbol = e.Value.ToString();
                log.Logs.Clear();
                log.Logs = await Http.GetFromJsonAsync<List<LogInfoItemDto>>($"{_url}&symbolName={e.Value.ToString()}");
            }
        else
            {
                log.Symbol = string.Empty;
                log.Logs.Clear();
                log.Logs = await Http.GetFromJsonAsync<List<LogInfoItemDto>>($"{_url}");
            }
        }

        spinner = false;

        // Update the UI
        StateHasChanged();
    }

    private async void GetLogsTrading()
    {
        _url = $"/api/GetLogsTrading?accType=Spot&accHolder=An";

        log.Logs.Clear();
        // Add your update logic here
        log.Logs = await Http.GetFromJsonAsync<List<LogInfoItemDto>>($"{_url}{(!string.IsNullOrEmpty(log.Symbol) ? $"&symbolName={log.Symbol}" : string.Empty)}");

        // Update the UI
        StateHasChanged();
    }

        private async void GetLogsTradingInfos()
    {
        _url = $"/api/GetLogsTradingInfos?accType=Spot&accHolder=An";

        log.Logs.Clear();
        // Add your update logic here
        log.Logs = await Http.GetFromJsonAsync<List<LogInfoItemDto>>($"{_url}{(!string.IsNullOrEmpty(log.Symbol) ? $"&symbolName={log.Symbol}" : string.Empty)}");

        // Update the UI
        StateHasChanged();
    }

    private async void GetAllLog()
    {
        _url = $"/api/GetAllLogs?accType=Spot&accHolder=An";

        log.Logs.Clear();
        // Add your update logic here
        log.Logs = await Http.GetFromJsonAsync<List<LogInfoItemDto>>($"{_url}{(!string.IsNullOrEmpty(log.Symbol) ? $"&symbolName={log.Symbol}" : string.Empty)}");

        // Update the UI
        StateHasChanged();
    }

    private async void GetLogsTechnic()
    {
        _url = $"/api/GetLogsTechnic?accType=Spot&accHolder=An";

        log.Logs.Clear();
        // Add your update logic here
        log.Logs = await Http.GetFromJsonAsync<List<LogInfoItemDto>>($"{_url}{(!string.IsNullOrEmpty(log.Symbol) ? $"&symbolName={log.Symbol}" : string.Empty)}");

        // Update the UI
        StateHasChanged();
    }

    private async void GetLogsService()
    {
        _url = $"/api/GetLogsService?accType=Spot&accHolder=An";

        log.Logs.Clear();
        // Add your update logic here
        log.Logs = await Http.GetFromJsonAsync<List<LogInfoItemDto>>($"{_url}{(!string.IsNullOrEmpty(log.Symbol) ? $"&symbolName={log.Symbol}" : string.Empty)}");

        // Update the UI
        StateHasChanged();
    }
}
