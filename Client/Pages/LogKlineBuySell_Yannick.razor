@page "/logboughtsold_yannick"
@using System.Globalization
@using BlazorApp.Shared.CoreDto
@using Newtonsoft.Json;
@inject HttpClient Http

@*<PageTitle>@(Properties.Resources.ACC_TYPE) - @(Properties.Resources.ACC_HOLDER) - Bought/Sold</PageTitle>*@

<h1>Bought/Sold</h1>
<p>List in chronological order</p>

@if (log == null)
{
    <div class="spinner"></div>
}
else
{
    @if (spinner)
    {
        <div class="spinner"></div>
    }
    else if (log.Logs != null && @_account != null)
    {
        <div class="container align-content-center align-self-baseline mt-1 pt-1">
            <DisplayHeader Account="@_account" DictBought="@_dictBought" DictSold="@_dictSold"></DisplayHeader>
            <div name="row-header" class="row my-1 py-1">
                <div class="d-block d-inline col-lg-3 col-md-3 col-sm-4 col-4 text-uppercase text-end">
                    <div class="input-group mb-3">
                        <div class="input-group-prepend">
                            <label class="input-group-text">List symbols</label>
                        </div>
                        <select class="custom-select" id="SearchSymbolId" name="SearchSymbol" @onchange="SelectedSymbolChanged">
                            <option selected>@(string.Empty)</option>
                            @foreach (var symbol in symbols)
                            {
                                <option value="@symbol">@symbol</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="d-block d-inline col-lg-4 col-md-5 col-sm-4 col-4">
                    <div class="input-group mb-3">
                        <div class="input-group-prepend">
                            <label class="input-group-text">Or</label>
                        </div>
                        <input type="text" class="form-control textbox-parameters" value="@_currentTextSymbol" @onchange="this.OnValueChanged" placeholder="Enter symbol here if you know it">
                    </div>
                </div>
                <div class="d-block d-inline col-lg-5 col-md-5 col-sm-4 col-4">
                    @if (!string.IsNullOrEmpty(@log.Symbol))
                    {
                        <p>Current observed symbol : @log.Symbol</p>
                    }
                </div>
            </div>
            <DisplayLogItem Logs="@log.Logs"></DisplayLogItem>
        </div>
    }
}

@code {
    private bool spinner = false;
    private string _currentTextSymbol = string.Empty;
    private List<string> symbols = new List<string>();
    private LogInfoDto log = new LogInfoDto();

    private string _stringAccount = null;
    private AccountDto _account = new AccountDto();

    private Dictionary<string, decimal> _dictBought = new Dictionary<string, decimal>();
    private Dictionary<string, decimal> _dictSold = new Dictionary<string, decimal>();

    private string _url = $"/api/GetBoughtSold?accType=Spot&accHolder=Yannick";

    protected override async Task OnInitializedAsync()
    {
        symbols = await Http.GetFromJsonAsync<List<string>>($"/api/GetListStringSymbolsBuySell?accType=Spot&accHolder=Yannick");

        _stringAccount = await Http.GetStringAsync($"/api/GetInfos?accType=Spot&accHolder=Yannick");
        CalculateProfitQuotes();

        // Add your update logic here
        log.Logs = await Http.GetFromJsonAsync<List<LogInfoItemDto>>(_url);

        // Update the UI
        StateHasChanged();

        ShouldRender();
    }

    private async void SelectedSymbolChanged(ChangeEventArgs e)
    {
        spinner = true;

        if (log != null)
        {
            if (!string.IsNullOrEmpty(e.Value.ToString()))
            {
                log.Symbol = e.Value.ToString();
                log.Logs.Clear();
                log.Logs = await Http.GetFromJsonAsync<List<LogInfoItemDto>>($"{_url}&symbol={e.Value.ToString()}");
            }
            else
            {
                log.Symbol = string.Empty;
                log.Logs.Clear();
                log.Logs = await Http.GetFromJsonAsync<List<LogInfoItemDto>>($"{_url}");
            }
        }

        spinner = false;

        // Update the UI
        StateHasChanged();
    }

    private async void OnValueChanged(ChangeEventArgs e)
    {
        spinner = true;

        if (log != null)
        {
            if (!string.IsNullOrEmpty(e.Value.ToString()))
            {
                log.Symbol = e.Value.ToString();
                log.Logs.Clear();
                log.Logs = await Http.GetFromJsonAsync<List<LogInfoItemDto>>($"{_url}&symbol={e.Value.ToString()}");
            }
            else
            {
                log.Symbol = string.Empty;
                log.Logs.Clear();
                log.Logs = await Http.GetFromJsonAsync<List<LogInfoItemDto>>($"{_url}");
            }
        }

        spinner = false;

        // Update the UI
        StateHasChanged();
    }

    private void CalculateProfitQuotes()
    {
        if (!string.IsNullOrEmpty(_stringAccount))
        {
            _account = JsonConvert.DeserializeObject<AccountDto>(_stringAccount);

            if (_account != null)
            {
                foreach (var itemQuote in _account.ListQuotes)
                {
                    foreach (var itemProfit in _account.RealAccountProfitAllTimes)
                    {
                        var listQuoteSold = itemProfit.CompletedDetailsSold.Where(x => x.Key == itemQuote).Sum(x => x.Value);
                        var listQuoteBought = itemProfit.CompletedDetailsBought.Where(x => x.Key == itemQuote).Sum(x => x.Value);

                        if (_dictBought.ContainsKey(itemQuote))
                        {
                            _dictBought.TryGetValue(itemQuote, out decimal totalBought);
                            totalBought += listQuoteBought;

                            _dictBought.Remove(itemQuote);
                            _dictBought.Add(itemQuote, totalBought);
                        }
                        else
                            _dictBought.Add(itemQuote, listQuoteBought);

                        if (_dictSold.ContainsKey(itemQuote))
                        {
                            _dictSold.TryGetValue(itemQuote, out decimal totalSold);
                            totalSold += listQuoteSold;

                            _dictSold.Remove(itemQuote);
                            _dictSold.Add(itemQuote, totalSold);
                        }
                        else
                            _dictSold.Add(itemQuote, listQuoteSold);
                    }
                }
            }
        }
    }
}
